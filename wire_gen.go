// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"log"
	spotify2 "steplems-bot/persistence/spotify"
	"steplems-bot/persistence/telegram"
	"steplems-bot/providers"
	"steplems-bot/services/spotify"
	telegram2 "steplems-bot/services/telegram"
	"steplems-bot/services/telegram/commands"
	"steplems-bot/services/youtube"
	"steplems-bot/types"
)

// Injectors from wire.go:

func NewWireApplication() (WireApplication, error) {
	port, err := providers.ProvidePort()
	if err != nil {
		return WireApplication{}, err
	}
	spotifyClientID, err := providers.ProvideSpotifyClientID()
	if err != nil {
		return WireApplication{}, err
	}
	spotifyClientSecret, err := providers.ProvideSpotifyClientSecret()
	if err != nil {
		return WireApplication{}, err
	}
	hostname, err := providers.ProvideHostname()
	if err != nil {
		return WireApplication{}, err
	}
	authenticator := providers.ProvideSpotifyAuth(spotifyClientID, spotifyClientSecret, hostname, port)
	factory := providers.LoggerFactoryProvider()
	spotifyAuthService := spotify.NewSpotifyAuthService(port, authenticator, factory)
	telegramBotToken, err := providers.ProvideBotToken()
	if err != nil {
		return WireApplication{}, err
	}
	telegramWebhookAddress, err := providers.ProvideBotWebhook()
	if err != nil {
		return WireApplication{}, err
	}
	botAPI, err := providers.ProvideTgBot(telegramBotToken, telegramWebhookAddress)
	if err != nil {
		return WireApplication{}, err
	}
	client := providers.ProvideYoutubeClient()
	youtubeService := youtube.NewYoutubeService(client, factory)
	databaseConnectionURL, err := providers.ProvideDatabaseConnectionURL()
	if err != nil {
		return WireApplication{}, err
	}
	db, err := providers.ProvideDatabase(databaseConnectionURL)
	if err != nil {
		return WireApplication{}, err
	}
	userRepository := spotify2.NewSpotifyUserRepository(db)
	telegramUserRepository := telegram.NewUserRepository(db)
	spotifyService := spotify.NewSpotifyService(port, spotifyAuthService, userRepository, telegramUserRepository, authenticator, factory)
	authorizeSpotifyCommand := commands.NewAuthorizeSpotifyCommand(spotifyService)
	helpCommand := commands.NewHelpCommand()
	nowPlayingCommand := commands.NewNowPlayingCommand(spotifyService)
	commandMap := telegram2.NewCommandMap(authorizeSpotifyCommand, helpCommand, nowPlayingCommand)
	telegramService := telegram2.NewTelegramService(botAPI, youtubeService, factory, commandMap)
	wireApplication := provideWireApplication(spotifyAuthService, telegramService, hostname, userRepository, telegramUserRepository)
	return wireApplication, nil
}

// wire.go:

type WireApplication struct {
	telegramService *telegram2.TelegramService
	sUserRepo       *spotify2.UserRepository
	tUserRepo       *telegram.UserRepository
	hostname        types.Hostname
	authService     *spotify.SpotifyAuthService
}

func provideWireApplication(authService *spotify.SpotifyAuthService, telegramService *telegram2.TelegramService, hostname types.Hostname, sUserRepo *spotify2.UserRepository, tUserRepo *telegram.UserRepository) WireApplication {
	return WireApplication{authService: authService, telegramService: telegramService, sUserRepo: sUserRepo, tUserRepo: tUserRepo, hostname: hostname}
}

func (w WireApplication) Start() error {
	ctx := context.Background()

	migratables := []types.MigrationRunner{
		w.sUserRepo,
		w.tUserRepo,
	}

	for _, m := range migratables {
		if err := m.RunMigrations(); err != nil {
			return err
		}
	}
	log.Printf("Starting application with hostname=%s\n", w.hostname)

	go w.authService.Serve()

	return w.telegramService.StartBot(ctx)
}
